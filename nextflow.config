// CONFIGURATION FILE
manifest {
    author = 'H3ABioNet'
    description = 'H3ABioNet Variant Calling Workflow'
    mainScript = 'main.nf'
}

//  FUNCTION TO ENSURE THAT RESOURCE REQUIREMENTS DON'T GO BEYOND A MAXIMUM LIMIT
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
            return params.max_memory as nextflow.util.MemoryUnit
            else
            return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
            return params.max_time as nextflow.util.Duration
            else
            return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// PROCESS SETTINGS
process {
    // ALL PROCESSES
    stageInMode = 'symlink'
    stageOutMode = 'rsync'
    scratch = 'false'

    // RESOURCES
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
    
    // PROCESS CONTAINERS AND RESOURCES
    withLabel:bwa {
        container = "$baseDir/containers/h3avarcall_bwa.sif"
        cpus = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    }
    withLabel:gatk {
        container = "$baseDir/containers/h3avarcall_gatk.sif"
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    }
    withLabel:fastqc {
        container = "$baseDir/containers/h3avarcall_fastqc.sif"
        cpus = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    }
    withLabel:trimmomatic{
        container = "$baseDir/containers/h3avarcall_trimmomatic.sif"
        cpus = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    }
}

// SINGULARITY SETTINGS
singularity {
    enabled = true
    cacheDir = "$baseDir/containers"
    runOptions = "--bind /global:/global --cleanenv"
    autoMounts = true
}

// INPUT PARAMETERS
def checkOutPath() {
    if(params.out == null) {
        out_path = "$baseDir/workflow_results"
    } else{
        out_path = params.out
    }
}

// WORKFLOW TRACING
def workflowTracing() {
    if(params.mode == null || params.help || params.mode in [ 'do.GetContainers', 'do.GenomeIndexing', 'do.MultiQC']) {}
    else if( params.mode in ['do.QC', 'do.ReadTrimming', 'do.ReadAlignment', 'do.VariantCalling', 'do.VariantFiltering' ]) {    
        if(params.mode == 'do.QC') {
            trace_dir = "${out_path}/1_QC"
        } else if(params.mode == 'do.ReadTrimming') {
            trace_dir = "${out_path}/2_Read_Trimming"
        } else if(params.mode == 'do.ReadAlignment') {
            trace_dir = "${out_path}/3_Read_Alignment"
        } else if(params.mode == 'do.VariantCalling') {
            trace_dir = "${out_path}/4_Variant_Calling"
        } else if(params.mode == 'do.VariantFiltering') {
            trace_dir = "${out_path}/5_Variant_Filtering"
        } else {}
        trace {
            enabled = true
            file = "${trace_dir}/workflow_report/h3avarcall_trace.txt"
        }
        timeline {
            enabled = true
            file = "${trace_dir}/workflow_report/h3avarcall_timeline.html"
        }
        report {
            enabled = true
            file = "${trace_dir}/workflow_report/h3avarcall_report.html"
        }
        dag {
            enabled = true
            file = "${trace_dir}/workflow_report/h3avarcall_workflow.dot"
        }
    } else {}
}

// PIPELINE PROFILES
profiles {
    local {
        executor = 'local'
        includeConfig "$baseDir/main.config"
        checkOutPath()
        workflowTracing()
    }
    slurm {
        executor = 'slurm'
        queue = 'batch'
        includeConfig "$baseDir/main.config"
        checkOutPath()
        workflowTracing()
    }
}
